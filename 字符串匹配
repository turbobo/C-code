#include <stdio.h>
#include <string.h>
int BF(char S[],char T[],int match[])
{
    int index=0;	//重新匹配位置
	int count=0;    //匹配成功次数
    int i=0;
    int j=0;
	//char match[100];   //匹配成功位置数组
    while(S[i]!='\0')
    {
    	//printf("BF %d",i);
        if(S[i]==T[j])
        {
//如果匹配成功，则继续比较下一对字符
            i++;   //匹配成功，主串也会后移一位
            j++;
        }
        else
        {
 //如果匹配不成功，主串和子串回溯坐标。index记录的是每次匹配时的开始位置
			index++;
            i=index;    //主串从上次记录位置开始重新匹配
            j=0;
        }
		//子串已经匹配到末尾
		if(T[j]=='\0'){
			match[count]=index;   //!!!!!!!!!!!!!!!!!!!!!!!!!数组初始都是0，如果第一位就匹配成功，则0为不会输出
			index=i;    //!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!将下次重新开始位置赋值为新的主串开始位置
			count++;
			j=0;
		}
    }
//	if(strlen(match)!=0)
	//	return 1;
    //else 
		return 0;
}
int main()
{	int flag=0;       		 //查找成功标记 
	int match[100];    
	for(int m=0;m<100;m++)			        //初始化找到的字符串为0
    	match[m]=-1; 
	char a[100];
	printf("请输入一行原串：");
    gets(a);
	printf("原串的长度是：%d,内容是：%s\n",strlen(a),a);
    char b[100];
	printf("请输入一行子串：");
    gets(b);
	printf("子串的长度是：%d,内容是：%s\n",strlen(b),b);

   // char match[100]=BF(a,b);
	BF(a,b,match);
	for(int i=0;match[i]!=-1;i++){
		flag=1;
		printf("在原串的%d,位置找到子串\n",match[i]+1);
		//printf("%d,",match);
	
	}   
		
   if(flag==0)
		printf("匹配失败！");
	
    return 0;
}


//hello,abc,hello,abc,hello,aabbcc,hello,abcabc
